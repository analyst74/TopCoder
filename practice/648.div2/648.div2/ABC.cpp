#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ABC {
    const string dict = "ABC";

    // returns how many new pairs are added if x is prepended to the string
    int countNewPairs(char x, string & str) {
        int result = 0;
        for (int i = 0; i < str.size(); ++i) {
            if (x < str[i]) ++result;
        }
        return result;
    }
    
    string expandString(char x, string str, int pairCount, int N, int K) {
    	int newCount = countNewPairs(x, str);
    	
        if (newCount == K) {
            str.insert(0, 1, x);
            if (str.length() < N) str.insert(0, N - str.length(), 'C');
            cout << "found " << str << endl;
            return str;
        }
        else if (newCount > K) {
            return "";
        }
        else {
            str.insert(0, 1, x);
            return expandString(str, pairCount + newCount, N, K);
        }    	
    }

    string expandString(string str, int pairCount, int N, int K) {
		string temp;

        if (pairCount == K) return str;
        if (pairCount > K || str.length() >= N) return "";

        for (int i = 0; i < dict.length(); ++i) {
        	temp = expandString(dict[i], str, pairCount, N, K);
        	if (temp != "") return temp;
        }
        
        return "";
    }
public:
	string createString(int N, int K) {
		if (K == 0) {
			string result = "";
			result.insert(0, N, 'C');
			return result;
		}
	
        return expandString("", 0, N, K);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	ABC *obj;
	string answer;
	obj = new ABC();
	clock_t startTime = clock();
	answer = obj->createString(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 3;
	p2 = "ABC";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 0;
	p2 = "CBA";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5;
	p1 = 10;
	p2 = "";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 15;
	p1 = 36;
	p2 = "CABBACCBAABCBBB";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
