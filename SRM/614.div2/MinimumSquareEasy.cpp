#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class MinimumSquareEasy {
public:
	long long minArea(vector <int> x, vector <int> y) {
		return nextSize(x, y, 2);
	}
	
	long long size(vector <int> x, vector <int> y) {
		long long w = *max_element(x.begin(), x.end()) - *min_element(x.begin(), x.end()) + 2;
		long long h = *max_element(y.begin(), y.end()) - *min_element(y.begin(), y.end()) + 2;
		
		cout << w * h << endl;		
		return w * h;
	}
	
	long long nextSize(vector <int> x, vector <int> y, int count) {
		if (count == 0) {
			return size(x,y);
		}
		
		vector<long long> sizes;
		
		sizes.push_back(nextSize(
			removeItem(x, min_element(x.begin(), x.end()) - x.begin()),
			removeItem(y, min_element(x.begin(), x.end()) - x.begin()),
			count-1
			));
			
		sizes.push_back(nextSize(
			removeItem(x, max_element(x.begin(), x.end()) - x.begin()),
			removeItem(y, max_element(x.begin(), x.end()) - x.begin()),
			count-1
			));
		
		sizes.push_back(nextSize(
			removeItem(x, min_element(y.begin(), y.end()) - y.begin()),
			removeItem(y, min_element(y.begin(), y.end()) - y.begin()),
			count-1
			));
			
		sizes.push_back(nextSize(
			removeItem(x, max_element(y.begin(), y.end()) - y.begin()),
			removeItem(y, max_element(y.begin(), y.end()) - y.begin()),
			count-1
			));
			
		cout << endl << min_element(sizes.begin(), sizes.end()) - sizes.begin() << endl;
		return *min_element(sizes.begin(), sizes.end());
	}
	
	vector<int> removeItem(vector <int> a, int index) {
		vector<int> a1(a);
		
		cout << index << ' ';
		
		a1.erase(a1.begin() + index);
		return a1;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	MinimumSquareEasy *obj;
	long long answer;
	obj = new MinimumSquareEasy();
	clock_t startTime = clock();
	answer = obj->minArea(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	long long p2;
	
	{
	// ----- test 0 -----
	int t0[] = {0,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {-1,-1,0,2,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-2,-1,0,-1,-2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 9ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1000000000,-1000000000,1000000000,-1000000000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1000000000,1000000000,-1000000000,-1000000000};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4000000008000000004ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {93,34,12,-11,-7,-21,51,-22,59,74,-19,29,-56,-95,-96,9,44,-37,-54,-21};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {64,12,-43,20,55,74,-20,-54,24,20,-18,77,86,22,47,-24,-33,-57,5,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 22801ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
